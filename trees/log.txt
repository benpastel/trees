TREE_COUNT=10 python -m trees.benchmarks


TREE_COUNT=10


Agaricus:

/Users/benji/dev/trees/trees/benchmarks.py:43: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  return X_svm.toarray(), y.astype(np.bool)
X.shape: train (5211, 126), valid (1302, 126)
binary classification with 2518 true and 2693 false
train xgboost with: {'n_estimators': 10, 'tree_method': 'hist'}...
/usr/local/opt/python@3.8/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/xgboost/sklearn.py:1146: UserWarning: The use of label encoder in XGBClassifier is deprecated and will be removed in a future release. To remove this warning, do the following: 1) Pass option use_label_encoder=False when constructing XGBClassifier object; and 2) Encode your labels (y) as integers starting with 0, i.e. 0, 1, 2, ..., [num_class - 1].
  warnings.warn(label_encoder_deprecation_msg, UserWarning)
[22:36:42] WARNING: /Users/travis/build/dmlc/xgboost/src/learner.cc:1095: Starting in XGBoost 1.3.0, the default evaluation metric used with the objective 'binary:logistic' was changed from 'error' to 'logloss'. Explicitly set eval_metric if you'd like to restore the old behavior.
(0.0s)
predict xgboost...
(0.0s)

      train preds bincount: [2693 2518]
      train: accuracy = 100.00%, precision = 100.00%, recall = 100.00%
      valid: accuracy = 100.00%, precision = 100.00%, recall = 100.00%


train BFS tree ...
(0.8s)
Classification model with 10 trees with sizes min=16 max=34 mean=25.9
  predict BFS tree...
(0.0s)

      train preds bincount: [2698 2513]
      train: accuracy = 99.90%, precision = 100.00%, recall = 99.80%
      valid: accuracy = 99.77%, precision = 100.00%, recall = 99.52%


train DFS tree ...
(0.2s)
Classification model with 10 trees with sizes min=63 max=63 mean=63.0
  predict DFS tree...
(0.0s)

      train preds bincount: [2693 2518]
      train: accuracy = 100.00%, precision = 100.00%, recall = 100.00%
      valid: accuracy = 100.00%, precision = 100.00%, recall = 100.00%



House Prices:

X.shape: train (1168, 79), valid (292, 79)
regression targets with min=35311.0, max=755000.0, mean=181216.2
train xgboost with: {'n_estimators': 10, 'tree_method': 'hist'}...
(0.0s)
predict xgboost...
(0.0s)

      train: log(MSE): 19.21, MAE: 10662.84
      valid: log(MSE): 20.36, MAE: 17823.46


train BFS tree ...
(0.5s)
Regression model with 10 trees with sizes min=4 max=10 mean=7.0
  predict BFS tree...
(0.0s)

      train: log(MSE): 21.41, MAE: 28425.44
      valid: log(MSE): 21.18, MAE: 26207.18


train DFS tree ...
(0.1s)
Regression model with 10 trees with sizes min=63 max=63 mean=63.0
  predict DFS tree...
(0.0s)

      train: log(MSE): 18.79, MAE: 9188.26
      valid: log(MSE): 20.22, MAE: 16323.43



Home Credit Default:

/Users/benji/dev/trees/trees/benchmarks.py:76: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  y = frame['TARGET'].values.astype(np.bool)
X.shape: train (246009, 104), valid (61502, 104)
binary classification with 19842 true and 226167 false
train xgboost with: {'n_estimators': 10, 'tree_method': 'hist'}...
[22:36:46] WARNING: /Users/travis/build/dmlc/xgboost/src/learner.cc:1095: Starting in XGBoost 1.3.0, the default evaluation metric used with the objective 'binary:logistic' was changed from 'error' to 'logloss'. Explicitly set eval_metric if you'd like to restore the old behavior.
(0.5s)
predict xgboost...
(0.1s)

      train preds bincount: [246007      2]
      train: accuracy = 91.94%, precision = 100.00%, recall = 0.01%
      valid: accuracy = 91.90%, precision = 0.00%, recall = 0.00%


train BFS tree ...
(1.3s)
Classification model with 10 trees with sizes min=7 max=52 mean=27.7
  predict BFS tree...
(0.1s)

      train preds bincount: [246009]
      train: accuracy = 91.93%, precision = 0.00%, recall = 0.00%
      valid: accuracy = 91.90%, precision = 0.00%, recall = 0.00%


train DFS tree ...
(2.5s)
Classification model with 10 trees with sizes min=63 max=63 mean=63.0
  predict DFS tree...
(0.2s)

      train preds bincount: [245879    130]
      train: accuracy = 91.96%, precision = 74.62%, recall = 0.49%
      valid: accuracy = 91.90%, precision = 58.33%, recall = 0.28%



Santander Value:

X.shape: train (3568, 4991), valid (891, 4991)
regression targets with min=30000.0, max=40000000.0, mean=5832821.2
train xgboost with: {'n_estimators': 10, 'tree_method': 'hist'}...
(1.8s)
predict xgboost...
(0.0s)

      train: log(MSE): 31.08, MAE: 3948305.99
      valid: log(MSE): 31.73, MAE: 5205123.88


train BFS tree ...
(11.0s)
Regression model with 10 trees with sizes min=1 max=7 mean=4.6
  predict BFS tree...
(0.0s)

      train: log(MSE): 31.64, MAE: 5320838.68
      valid: log(MSE): 31.84, MAE: 5836080.30


train DFS tree ...
(7.3s)
Regression model with 10 trees with sizes min=63 max=63 mean=63.0
  predict DFS tree...
(0.1s)

      train: log(MSE): 30.68, MAE: 3471431.01
      valid: log(MSE): 31.76, MAE: 5274145.91